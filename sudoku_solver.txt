#include <iostream>

using namespace std;
const int size = 9;
int store;
int array[size][size];

//int array_1[size][size];

bool check_row(int,int);
bool check_col(int,int);
bool check_3d(int,int,int);
void solution(int,int);
void traverse(int,int);
void printarray();
void printarray_1();
void do_not_modify();
//void solve(int,int);

bool check_row(int value,int row)
{
    for(int i = 0;i<size;i++)
    {
        if(array[row][i]==value)
        {
            return false;
        }
    }
    return true;
}



bool check_col(int value,int column)
{
    for(int i = 0;i<size;i++)
    {
        if(array[i][column]==value)
        {
            return false;
        }
    }
    return true;
}

bool check_3d(int value,int row,int column)
{
    for(int i = (row/3)*3;i<(row/3)*3+3;i++)
    {
    for(int k = (column/3)*3;k<(column/3)*3+3;k++)
    {
        if(array[i][k]==value)
        {
            return false;
        }
    }
    }
    return true;
}

/*void do_not_modify()
{
    for(int row = 0;row<size;row++)
    {
        for(int col = 0;col<size;col++)
        {
            if(array[row][col]!=0) //if its not zero in the original array
            //then put a -1 at that same spot in the secobnd array. This is to make sure
            //that the original array is not modified.
            {
                array_1[row][col] = -1;
            }
        }
    }
}*/

/*bool isempty(int row,int col)
{
    if(array[row][col]!=0)
    {
        col++;
    }
    return false;
}*/

void traverse(int row,int col)
{
     if(col==8)
    {
        solution(row+1,0);
    }
    else
    {
        solution(row,col+1);
    }
}
void solution(int row, int col)
{
    //int value = 1;
    int found = 0;
      //int x;

    //int col=0;

   /* while(array_1[row][col]==-1)
    {
        col++;

    if(col>8) //if you are not at the end of the matrix
    {
        col = 0;
        row++;
        //found = solution(row,col);
       // return found;
    }

    else if(col<8)
    {
        col++;
    }*/

    if(row>8)
    {
        printarray();
        return;
    }
    //}




    /*if(row==9)
    {
        printarray();
        found = 1;
        return found;
    }*/



    //{
        //for(int row = 0;row<size;row++)
        //{
            //for(int col = 0;col<size;col++)
    if(array[row][col]!=0) //then move on to the next spot
    {
        traverse(row,col);
    }
    else
    {
    for(int value = 1;value<=9;value++)
        {
           if(check_row(value,row)&&check_col(value,col)&&check_3d(value,row,col))
            //check if value is legitimate
            {
                //x = array[row][col];
                array[row][col] = value;
                //nextrow = row;
                //nextcolumn = col+1;

            found = 1;
            traverse(row,col);
            //col++;
            //cout<<"The spot is "<<value<<"at"<<row<<" and "<<col<<endl;
             /*if(col==8)
             {
                solution(row+1,col);
             }
             else
             {
                 solution(row,col+1);
             }
             array[row][col] = x;*/
          /* if ( found==1 )
                break;
            }*/
        }
//return false;
        }
        //}
    //}
    //return found;
    array[row][col] = 0;
    }
    }


void printarray()
{
    for(int i = 0;i<size;i++)
    {
    for(int j = 0;j<size;j++)
    {
        cout<<array[i][j]<<" ";
    }
    cout<<endl;
    }
}




int main()
{
    array[size][size]={0};

    //array_1[size][size]={0};

    cout<<"Specify the problem"<<endl;
    {
        /*for(int i=0;i<size;i++)
        for(int j =0; j<size;j++)
        {
            cout<<"Please enter an element in the array or enter zero to skip"<<endl;
            cin>>array[i][j];
        }*/
        array[0][0] = 5;
        array[0][1] = 3;
        array[0][4] = 7;
        array[1][0] = 6;
        array[1][3] = 1;
        array[1][4] = 9;
        array[1][5] = 5;
        array[2][1] = 9;
        array[2][2] = 8;
        array[2][7] = 6;
        array[3][0] = 8;
        array[3][4] = 6;
        array[3][8] = 3;
        array[4][0] = 4;
        array[4][3] = 8;
        array[4][5] = 3;
        array[4][8] = 1;
        array[5][0] = 7;
        array[5][4] = 2;
        array[5][8] = 6;
        array[6][1] = 6;
        array[6][6] = 2;
        array[6][7] = 8;
        array[7][3] = 4;
        array[7][4] = 1;
        array[7][5] = 9;
        array[7][8] = 5;
        array[8][4] = 8;
        array[8][7] = 7;
        array[8][8] = 9;

    }
    //do_not_modify();
    //int col = 0;
    cout<<"Initial puzzle"<<endl;
    printarray();
    cout<<endl;
    cout<<"Final output"<<endl<<endl;
    //for(int m = 0; m<size;m++)
    //{
    //for(int row = 0;row<size;row++)
    //{
        solution(0,0);
    //}
        //printarray();
        //printarray_1();
    //}
    return 0;
}
